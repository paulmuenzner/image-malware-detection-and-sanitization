import os
import os.path
import sys
import traceback
from typing import Dict, List, Union

sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
)
from typing import List, TypedDict

from interfaces.signature_list import SignatureListInterface
from utils.chunk_occurrence import validate_occurrence
from utils.select_signature_lib import select_signature_lib


class ResultOccurrence(TypedDict):
    number: str
    positions: List[int]
    name: str


class OccurrenceInfo(TypedDict):
    name: str
    indexes: List[int]


OccurrenceList = List[OccurrenceInfo]


###########################################################################################
# Validating if the count of occurrences is accurate for each type of chunk
def count_validation(file_string: str, extension: str) -> dict[str, str]:
    try:
        signature_lib: SignatureListInterface = select_signature_lib(extension)

        # Collecting png chunks with a non-permitted number of occurrences
        wrong_number_of_chunks: Dict[str, str] = {}

        # Loop through each possible chunk in lib
        for key, value in signature_lib.items():

            # Occurrence validation for each chunk
            occurrence_validation = validate_occurrence(file_string, key, value)

            # Collect chunks which are more or less often appearing than permitted according to lib
            if occurrence_validation["validation_count"]["error"] == True:
                wrong_number_of_chunks[key] = occurrence_validation["validation_count"][
                    "message"
                ]
        return wrong_number_of_chunks
    except ValueError as e:
        raise ValueError(f"ValueError in 'validate_occurrence': {e}")
    except Exception as e:
        traceback.print_exc()
        raise Exception(f"ExceptionError in 'validate_occurrence': {e}")
