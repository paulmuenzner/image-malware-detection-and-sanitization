import os
import os.path
import sys
from typing import Dict, List, TypedDict, Union

sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
)
from typing import List

from interfaces.occurrence_validation import ResultCountInterface, ResultOccurrence
from interfaces.signature_list import SignatureListObjInterface


##########################################################
# Count how often a string has a sub string
def count_occurrence(string: str, sub_string: str) -> int:
    return string.count(sub_string)


############################################################################
# Get indexes of all occurrences
def find_occurrence_indices(main_string: str, sub_string: str) -> List[int]:
    indices = []
    index = main_string.find(sub_string)

    while index != -1:
        indices.append(index)
        index = main_string.find(sub_string, index + 1)

    return indices


###############################################################################
# Check correct number of signature occurrences
def validate_count(
    count: int, allowed_number: int, criteria: str, chunk_name: str
) -> ResultCountInterface:
    if criteria == "maximum" and count > allowed_number:
        return {
            "error": True,
            "message": f"More {chunk_name} chunks than permitted. Permitted: {criteria} {allowed_number}. Count: {count}",
        }
    if criteria == "minimum" and count < allowed_number:
        return {
            "error": True,
            "message": f"Less {chunk_name} chunks than permitted. Permitted: {criteria} {allowed_number}. Count: {count}",
        }
    if criteria == "exact" and count != allowed_number:
        return {
            "error": True,
            "message": f"Not exact number of permitted chunk {chunk_name}. Permitted: {criteria} {allowed_number}. Count: {count}",
        }
    return {
        "error": False,
        "message": f"Permitted number of chunk {chunk_name} in image. Permitted: {criteria} {allowed_number}. Count: {count}",
    }


###########################################################################################
# Validate occurrences
def validate_occurrence(
    file_string: str, chunk_name: str, value: SignatureListObjInterface
) -> ResultOccurrence:
    try:
        signature = value["signature"]
        allowed_number = value["occurrence"]["number"]
        criteria: str = value["occurrence"]["criteria"]

        # Count occurrences. Needed for validation
        count = file_string.count(signature)

        # Get all index positions
        list_indexes_signature = find_occurrence_indices(file_string, signature)

        # Compare number of found and permitted number of chunk type
        validation_count = validate_count(count, allowed_number, criteria, chunk_name)
        return {
            "index_positions": list_indexes_signature,
            "chunk_name": chunk_name,
            "validation_count": validation_count,
        }
    except Exception as e:
        raise ValueError(f"Error in 'validate_occurrence': {e}")
