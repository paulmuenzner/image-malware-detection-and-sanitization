from src.data.mock import image_path_to_test
from src.services.count_validation import count_validation
from src.services.file_has_valid_start_end import file_has_valid_start_end
from src.services.position_validation import position_validation
from src.utils.collection_methods import is_collection_empty
from src.utils.get_file_extension import get_file_extension
from src.utils.is_extension_valid import is_extension_valid
from src.utils.read_file import read_file


def main():
    ###################################################
    # Valid file type extension?
    #######
    extension = get_file_extension(image_path_to_test)
    valid_extension = is_extension_valid(extension)
    if valid_extension is False:
        raise ValueError(
            f"Invalid extension provided in 'select_signature_lib'. Extension provided: {extension}. Please provide a valid file format."
        )

    #################################################
    # Read image into decimal string to validate
    ######
    file_as_decimal_string = read_file(image_path_to_test)

    ###############################################################################
    # Valid file start and and as per official definition? If not, file corrupted.
    ############
    valid_start, valid_end = file_has_valid_start_end(
        file_as_decimal_string, image_path_to_test
    )
    if valid_start is False or valid_end is False:
        raise ValueError(
            f"File very likley corrupted. Start or/and end signature malformed. Start correct: {valid_start}. End correct: {valid_end}"
        )

    #####################################################################
    # Occurrence validation
    #################
    wrong_numbers_of_chunks = count_validation(file_as_decimal_string, extension)
    wrong_positions_of_chunks = position_validation(file_as_decimal_string, extension)

    print("wrong_numbers_of_chunks", wrong_numbers_of_chunks)
    print("wrong_positions_of_chunks", wrong_positions_of_chunks)

    # Print count error
    if is_collection_empty(wrong_numbers_of_chunks) is not True:
        print("item, key", wrong_numbers_of_chunks)
        return

    # Print wrong position error
    if is_collection_empty(wrong_positions_of_chunks) is not True:
        print("item, key", wrong_positions_of_chunks)
        return

    print("File seems good")


if __name__ == "__main__":
    main()
